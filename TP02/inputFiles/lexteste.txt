%% LEX

%literals = "+-/*=()" ## a single char

%states = [
            ('COISO', 'inclusive'),
            ('DIOGO', 'EXCLUSIVE'),
        ]   # grande estado


%ignore = " \t\n"

%tokens = [ 'VAR','NUMBER' ]

'[a-zA-Z_][a-zA-Z0-9_]*' return(t.value, 'VAR')

'\d+(\.\d+)?' return($ANY, 'NUMBER', float(t.value))




%% YACC
%precedence = [
    ('left','+','-'),
    ('left','*','/'),
    ('right','UMINUS'),
]

ts = { }

stat : VAR '=' exp { ts[t[1]] = t[3] }
stat : exp { print(t[1]) }
exp : exp '+' exp { t[0] = t[1] + t[3] }
exp : exp '-' exp { t[0] = t[1] - t[3] }
exp : exp '*' exp { t[0] = t[1] * t[3] }
exp : exp '/' exp { t[0] = t[1] / t[3] }
exp : '-' exp %prec UMINUS { t[0] = -t[2] }
exp : '(' exp ')' { t[0] = t[2] }
exp : NUMBER { t[0] = t[1] }
exp : VAR { t[0] = getval(t[1]) }

%%
# symboltable : dictionary of variables
ts = { }
def p_error(t):
print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")
def getval(n):
if n not in ts: print(f"Undefined name '{n}'")
return ts.get(n,0)
y=yacc()
y.parse("3+4*7")